/*
 * d.cpp 2024-07-18
 * Copyright (C) 2024 Woshiluo Luo <woshiluo.luo@outlook.com>
 *
 * 「Two roads diverged in a wood,and I—
 * I took the one less traveled by,
 * And that has made all the difference.」
 *
 * Distributed under terms of the GNU GNU AGPLv3+ license.
 */

#include <cstdio>
#include <cstdint>
#include <cstring>
#include <cstdlib>

#include <vector>
#include <algorithm>

using i32 = int32_t;
using u32 = uint32_t;
using ci32 = const int32_t;
using cu32 = const uint32_t;

using i64 = int64_t;
using u64 = uint64_t;
using ci64 = const int64_t;
using cu64 = const uint64_t;

inline bool isdigit( const char cur ) { return cur >= '0' && cur <= '9'; }/*{{{*/
template <class T> 
T Max( T a, T b ) { return a > b? a: b; }
template <class T> 
T Min( T a, T b ) { return a < b? a: b; }
template <class T> 
void chk_Max( T &a, T b ) { if( b > a ) a = b; }
template <class T> 
void chk_Min( T &a, T b ) { if( b < a ) a = b; }
template <typename T>
T read() { 
	T sum = 0, fl = 1; 
	char ch = getchar();
	for (; isdigit(ch) == 0; ch = getchar())
		if (ch == '-') fl = -1;
	for (; isdigit(ch); ch = getchar()) sum = sum * 10 + ch - '0';
	return sum * fl;
}
template <class T> 
T pow( T a, i32 p ) {
	T res = 1;
	while( p ) {
		if( p & 1 ) 
			res = res * a;
		a = a * a;
		p >>= 1;
	}
	return res;
}/*}}}*/

const int N = 1e5 + 1e4;
const int K = 210;

i64 f[N][K];

int main() {
#ifdef woshiluo
	freopen( "d.in", "r", stdin );
	freopen( "d.out", "w", stdout );
#endif

	memset( f, -1, sizeof(f) );

	ci32 n = read<i32>();
	ci32 x = read<i32>();
	ci32 y = read<i32>();
	ci32 t = x + y;

	std::vector<i32> a(n + 1);
	for( int i = 1; i <= n; i ++ ) 
		a[i] = read<i32>();
	std::sort( a.begin() + 1, a.end() );
	std::reverse( a.begin() + 1, a.end() );

	f[0][x] = 0;
	for( int i = 1; i <= n; i ++ ) {
		for( int j = 0; j <= t; j ++ ) {
			if( f[ i - 1 ][j] == -1 ) 
				continue;
			if( j + j + 1 <= t ) {
				if( f[i][ j + j + 1 ] == -1 ) 
					f[i][ j + j + 1 ] = f[ i - 1 ][j];
				chk_Max( f[i][ j + j + 1 ], f[ i - 1 ][j] );
			}
			if( t - j <= j ) {
				ci32 nxt = j - ( t - j );
				if( f[i][nxt] == -1 ) 
					f[i][nxt] = f[ i - 1 ][j] + a[i];
				chk_Max( f[i][nxt], f[ i - 1 ][j] + a[i] );
			}
		}
	}

	i64 res = 0;
	for( int i = 0; i <= t; i ++ )
		chk_Max( res, f[n][i] );

	printf( "%lld\n", res );
}
