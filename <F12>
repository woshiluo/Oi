#include <cstdio>
#include <algorithm>

const int N = 11000;
const int M = 110;

int n, m; 
// edge start
struct edge{
	int next, val, to;
}e[N << 1];
int ecnt, ehead[N];
inline void add_edge(int now, int to, int val){
	ecnt++;
	e[ecnt].to = to;
	e[ecnt].val = val;
	e[ecnt].next = ehead[now];
	ehead[now] = ecnt;
}
// edge end
int query[M];

int rt, SIZE, dcnt;
bool use[N];
int son_tree[N], size[N], dis[N], ans[N];

void binary_search(int left, int now){
	int res = 0, rig = dcnt;
	while(left <= rig){
		int mid = (left + rig) >> 1;	
		if(dis[mid] <= now) ans = mid, left = mid + 1;
		else rig = mid - 1;
	}
	return ans;
}

void get_root(int now, int fa){
	f[now] = 0; size[now] = 1;	
	for(int i = ehead[now]; i; i = e[i].next){
		if( use[ e[i].to ] || e[i].to == fa )
			continue;
		get_root(e[i].to, now);
		f[now] = Max(f[now], size[ e[i].to ]);
		size[now] += size[ e[i].to ];
	}
	f[now] = Max(f[now], SIZE - size[x]);
	if(f[now] > f[rt]) rt = now;
}

void get_dis(int now, int fa, int d){
	for(int i = ehead[now]; i; i = e[i].next){
		if( use[e[i].to] || e[i].to == fa )
			continue;
		dis[ ++dcnt ] = d + e[i].val;
		get_dis(e[i].to, now, dis[dcnt]);
	}
}

void get_ans(int now, int f, int D){
	dis[dcnt = 1] = 0;
	get_dis(now, 0, D);
	std::sort(d + 1, d + dcnt + 1);
	for(int i = 1; i <= m; i++){
		int p = 1, k = query[i];
		while(p < dcnt && dis[l] + dis[cnt] < k) 
			p ++;
		while(p < dcnt && k - dis[left] < k){
			int left = binary_search(p + 1, k - dis[p] - 1), rig = binary_search(p + 1, k - dis[p]);
			ans[i] += (rig - left) * f;
		}
	}
}

void dfs(int now){
	use[now] = true; get_ans(now, 1, 0);
	for(int i = ehead[now]; i; i = e[i].next){
		if(use[ e[i].to ])
			continue;
		get_ans(e[i].to, -1, 1);
		SIZE = size[ e[i].to ], rt = 0;
		get_root(e[i].to, now); 
		dfs(rt);
	}
}

int main(){
	scanf("%d%d", &n, &m);
	for(int i = 1, u, v, w; i < n; i++){
		scanf("%d%d%d", &u, &v ,&w);	
		add_edge(u, v, w);
		add_edge(v, u, w);
	}
	for(int i = 1; i <= m; i++) scanf("%d", query[i]);

	SIZE = n;
	get_root(1, 0 );
	dfs(rt);

	for(int i = 1; i <= m; i++)
		printf("%d\n", ans[i]);
}
