#include <cstdio>
#include <cstring>

const int N=110;
const int INF=0x7f7f7f7f;

int n,s,t;
int a[N][N];

// edge start 
struct edge{
	int to,next,flow,val;
}e[(N*N)<<1];
int ehead[N<<1],ecnt;
inline void add_edge(int now,int to,int flow,int val){
	ecnt++;
	e[ecnt].to = to;
	e[ecnt].flow = flow;
	e[ecnt].val = val;
	e[ecnt].next = ehead[now];
	ehead[now] = ecnt;
}
// edge end 
// spfa start 
int head,tail,head_dep,tail_dep;
int pre[N], dis[N], que[N<<3], cur[N], flow[N];
inline bool spfa_Mi(){
	memset(dis, INF, sizeof(dis));
	memset(flow, INF, sizeof(INF));
	memset(vis, 0, sizeof(vis));

	return pre[t] != 0;
}
// spfa end
int Mincost, Maxflow;
inline void MiCMF(){
	for(int i=1;i<=n;i++){
		for(int j=1;j<=n;j++){
			add_edge(i,j+n,1,a[i][j]);
			add_edge(j+n,i,0,-a[i][j]);
		}
	}
	while( spfa_Mi() ){
		Mincost += flow[t] * dis[t];
		int now = t;
		while(now != s){
			e[ cur[now] ].flow -= flow[t];
			e[ cur[now] + ( (cur[now] & 1)? 1: -1) ].flow += flow[t];
			now = pre[now];
		}
	}
}

int main(){
	scanf("%d",&n);
	s = (n<<1) + 2;
	t = (n<<1) + 3;
	for(int i=1;i<=n;i++){
		for(int j=1;j<=n;j++){
			scanf("%d",&a[i][j]);
		}
	}
	// MiCMF
	MiCMF();
}
